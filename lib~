#!/bin/bash


sizeOf() {
  location=$(dirname $(realpath $1))
  name=$(basename $(realpath $1))
  sizeCachePath="$location/.size_of_$name"
  if [ ! -e "$cachePath" ]; then
    echo $(du -sch $1 | head -n 1 | cut -d "	" -f1 ) > $sizeCachePath
  fi
  echo "$(cat "$sizeCachePath")"
}

# (word, count)
pluralize() {
 echo "$2 $1$(if [ "$2" != "1" ]; then echo "s"; fi)"
}

# (count, path)
layerStatusLine() {
  if [ "$3" != "upper" ]; then
    # lower layers
    LayerDate=$(date -d @$(basename $2 | cut -c 7-) "$DisplayDateFormat")
  else
    # upper layer
    LayerDate=$(printf "%${#LayerDate}s" "now")
  fi
  LayerFileCount=$(find $2 -type f | wc -l)
  echo "layer $(printf "%${#LayerCount}d" $1) from $LayerDate with $(sizeOf "$2") in $(pluralize "file" $LayerFileCount)"
}

# set all the variables needed for working with a layer-pool
setPoolVars() {
  # display "not " if Pool is not mounted
  if mount | grep $TargetPath > /dev/null; then
    PoolMounted="true"
  else
    PoolMounted="false"
  fi

  # date in format suitable for use in pathname
  Now=$(date "$DateFormat")
  
  # whole path with date
  LowerPath="$PoolPath/lower-$Now"
  
  # path to upper dir
  UpperPath="$PoolPath/upper"
  
  # path to work dir
  WorkPath="$PoolPath/work"
  
  # total lower-layer-count
  LayerCount=$(find "$PoolPath" -name lower-* | wc -l)

  # ":"-seperated list of layer-paths
  LowerList=""
  for f in "$PoolPath/lower-"*; do
    LowerList="$(realpath "$f"):$LowerList"
  done
  LowerList=${LowerList::-1}
}

# used by --merge
setToLayerPath() {
  i=1
  for f in "$PoolPath/lower-"*; do
    if [ "$i" == "$toLayerID" ]; then
      toLayerPath="$f"
      break
    fi
    i=$(expr $i + 1)
  done
}

# (from-ID, to-ID)
setLowerList() {
  if [[ "$1" =~ "^[0-9]+$" ]] && [[ "$1" =~ "^[0-9]+$" ]] ; then
    from="$1";to="$2"
  else
    from="1";to="999999999"
  fi

  LowerList=""
  i=1
  for f in "$PoolPath/lower-"*; do
    if [ "$i" >= "$from" ] && [ "$i" <= "$to" ] ; then
      LowerList="$(realpath "$f"):$LowerList"
    fi
    i=$(expr $i + 1)
  done
  LowerList=${LowerList::-1}
}

# (fromLayerPath, toLayerPath)
mergeLayersByPath() {
  echo "merging $1 into $2"
  rsync --remove-source-files "$1/"* "$2"
  # find "$1/"* -type d -empty -delete
  
  # displays message if layer has not been emptied and deleted completely
  rmdir "$1"
}



























