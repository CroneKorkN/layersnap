#!/bin/bash

# layersnap
# 
# overlayfs- and rsync-based simple snapshots
#
# programme-structure:
# - ls_bootstrap is called at the EOF
# - ls_bootstrap calls parse_request and calls the appropriate controller
# - controller uses helpers to do the job
#
# convention:
# - GlobalVariable
# - localVariable
# - function_name()
#
# terminology:
# - layer: one single directory
# - snapshot: a directory with all previous layers
#
# todo:
# - ubuntu 12.04 syntax
# - $((2 ** 4))
# - ubuntu 12.04 needs 'sudo apt-get install realpath'
# - legacy-mode: check both mount-points seperately


##############
##############
##          ##
##  ROUTER  ##
##          ##
##############
##############


#
# status, prepare, snapshot, merge or restore?
#

ls_bootstrap() { # (request)
  # parse request parameters
  parse_request $*
  
  # set mode depending on host-system
  set_mode

  # basic paths and vars
  TargetName="$(basename $TargetPath)"
  PoolPath="$(dirname $TargetPath)/.layersnap/$TargetName"
  DateFormat="+%s"
  DisplayDateFormat="+%d.%m.%Y %H:%M:%S"

  # jeahjeahjeah
  case $ACTION in

    status)
      ls_status
    ;;

    snapshot)
      ls_snapshot
    ;;
    
    merge)
      ls_merge
    ;;
    
    restore)
      ls_restore
    ;;
  esac
}


###################
###################
##               ##
##  CONTROLLERS  ##
##               ##
###################
###################


# 
# show status and layers
#

ls_status() {
  exit_unless_layersnapped

  # set or refesh pool vars
  set_pool_vars

  # ensure target is mounted
  ls_mount
    
  # display summerizing information
  echo "$TargetPath uses $LayerCount layers. $(pluralize "layer" $LayersAvailable) available."
  
  if [ "$LSMode" == "unlimited" ]; then
    # show detailed inforamtion for each layer
    i=1
    for f in "$PoolPath/lower-"*
    do
      layer_status_line $i $f
      i=$(expr $i + 1)
    done

    # show final status line for upper directory
    layer_status_line $LayerCount $UpperPath upper
  elif [ "$LSMode" == "legacy" ]; then
    if [ -d "$PoolPath" ]; then
      layer_status_line 1 "$Lower1Path"
      if [ ! -d "$Upper2Path" ]; then
        layer_status_line 2 "$UpperPath" upper
      else
        layer_status_line 2 "$Lower2Path"
        layer_status_line 3 "$Upper2Path" upper
      fi
    fi
  fi
}

#
# mount pool
#

ls_mount() {
  # return if already mounted
  if is_pool_mounted; then
    return 1
  fi

  # return if nothing to mount
  if ! is_layersnapped; then
    return 1
  fi
  
  # set or refesh pool vars
  set_pool_vars
  
  # select mode
  case $LSMode in
    legacy)
      if [ "$LayerCount" -ge "3" ]; then
        debug mount -t overlayfs -o rw,lowerdir="$Lower1Path",upperdir="$UpperPath" overlayfs "$Lower2Path"
        sleep 1
        debug mount -t overlayfs -o rw,lowerdir="$Lower2Path",upperdir="$Upper2Path" overlayfs "$TargetPath"
      elif [ "$LayerCount" -ge "2" ]; then
        debug mount -t overlayfs -o rw,lowerdir="$NewLowerPath",upperdir="$UpperPath" overlayfs "$TargetPath"
      fi
    ;;
    
    unlimited)
      mount -t overlay overlay -o rw,lowerdir="$LowerList",upperdir="$UpperPath",workdir="$WorkPath" "$TargetPath"
    ;;
  esac

  echo "layers have just been mounted."
}

#
# create new snapshot-layer
#
# - unmount layers, except for first snapshot 
# - make lower-layer from target- or form upper-directory (on first snapshot)
# - create new empty upper directory
# - remount layers
#

ls_snapshot() {
  set_pool_vars
  
  # select mode
  case $LSMode in
    legacy)
      ls_snapshot_legacy
    ;;
    unlimited)
      ls_snapshot_unlimited
    ;;
  esac
  
  # feedback
  echo "NOTICE: layersnap created new snapshot $LayerName."
  
  # mount it
  ls_mount
}

# two-layer-mode
ls_snapshot_legacy() {
  if [ -d "$Upper2Path" ]; then
    echo "ERROR: no more layers available"
    exit 1
  fi

  # check 
  if is_first_snapshot; then
    debug echo "first legacy snapshot"
    # create pool- and upper-dir
    mkdir -p "$PoolPath" "$UpperPath" 

    # make target dir the new lower dir
    mv     "$TargetPath" "$NewLowerPath"
    
    # recreate target-dir as mountpoint
    mkdir  "$TargetPath"
  else
    debug echo "second legacy snapshot"
    # unmount target dir
    umount "$TargetPath"

    # create dirs
    mkdir  "$Upper2Path" "$NewLowerPath"
  fi
}

# unlimited mode
ls_snapshot_unlimited() {
  # making an empty snapshot is nonsensual
  if [ ! "$(ls -A $UpperPath)" ]; then
    echo "WARNING: layersnap rejected making an empty snapshot."
    exit 1
  fi

  # initial or consecutive snapshot?
  if is_first_snapshot; then
    # create pool dir
    mkdir -p "$PoolPath"
    
    # create work dir
    mkdir "$WorkPath"
    
    # make target dir the mew lower dir
    mv    "$TargetPath" "$NewLowerPath"
    
    # create new target dir as mountpoint
    mkdir "$TargetPath"
  else
    # unmount target dir
    umount "$TargetPath"
    
    # make target dir the mew lower dir
    mv    "$UpperPath" "$NewLowerPath"
  fi

  # create upper dir anyway
  mkdir "$UpperPath"
}

#
# restore layer
#
# - let user select layer-Id to restore
# - merge layer-after-layer into lowest layer
# - make lowest layer the new target dir
# - clean up
#

ls_restore() {
  exit_unless_layersnapped

  # show status screen first
  ls_status
  
  set_pool_vars
  
  # get user input, which snapshot to restore
  read -p "Snapshot ID to restore: " destinationLayerID
  
  # confirm
  read -p "Enter 'restore' to confirm: " confirmation
  if [ ! "$confirmation" == "restore" ]; then
    echo "aborting."
    exit 1
  fi
  
  # unmount and remove target
  umount "$TargetPath"
  rmdir  "$TargetPath"
  
  # UNLIMITED
  if [ "$LSMode" == "unlimited" ]; then
    # initialize iterator
    i=1
    
    # iterate through lower-dirs
    for f in "$PoolPath/lower-"*; do
      if [ "$i" == 1 ]; then
        # remember lowest layer
        LowestPath="$f"
      else
        # merge upper layers into remembered lowest it
        merge_layers_by_path "$f/" "$LowestPath"
      fi
      
      # check if target-layer reached
      if [ "$i" == "$destinationLayerID" ]; then
        # stop merging
        break
      fi
      
      # increase iterator
      i=$(expr $i + 1)
    done
    
    # make merged dir the target dir
    mv "$LowestPath" "$TargetPath"  
  
  # LEGACY 
  elif [ "$LSMode" == "legacy" ]; then
    # umount lower2 if neccessary
    if [ "$LayerCount" == "3" ]; then
      umount "$Lower2Path"
    fi
    
    # keep third layer changes?
    if [ "$destinationLayerID" -ge "3" ]; then
      merge_layers_by_path "$Upper2Path" "$Lower1Path"
    fi
    
    # keep second layer changes?
    if [ "$destinationLayerID" -ge "3" ]; then
      merge_layers_by_path "$UpperPath" "$Lower1Path"
    fi
    
    # keep base layer anyway
    mv "$Lower1Path" "$TargetPath"
  fi
  

  # remove leftovers
  rm -R "$PoolPath"
}

#
# merge layers
#
# - ask for layers to merge
# - merge
#

ls_merge() {
  exit_unless_layersnapped

  # show status screen first
  ls_status

  # get user input, which layers to merge
  read -p "Merge layers starting from: " fromLayerID
  read -p "Merge layers ending with: " destinationLayerID
  
  # confirm
  echo "All layers between and including layers $fromLayerID and $destinationLayerID will be merged into layer $destinationLayerID."
  read -p "Enter 'merge' to confirm: " confirmation
  if [ ! "$confirmation" == "merge" ]; then
    echo "aborting."
    return 2
  fi
  
  # find destinationLayer-path
  set_destination_layer_path
  
  # initialize iterator
  i=1
  
  # iterate through lower-dirs
  for f in "$PoolPath/lower-"*
  do
    # check if layer is affected
    if [ "$i" -ge "$fromLayerID" ] && [ "$i" -lt "$destinationLayerID" ]; then
      # merge
      merge_layers_by_path $f $destinationLayerPath
    elif [ "$i" -ge "$destinationLayerID" ]; then
      # break if last layer reached
      break
    fi
    
    # increase iterator
    i=$(expr $i + 1)
  done
  
  # feedback
  echo "done"
}


#############
#############
##         ##
## HELPERS ##
##         ##
#############
#############

# check if target is layersnapped
is_layersnapped() {
  if [ -d "$PoolPath" ]; then
    return 0
  else
    return 1
  fi
}

# check if target is layersnapped (snapshots existing)
exit_unless_layersnapped() {
  if [ ! -d "$PoolPath" ]; then
    echo "ERROR: $ACTION not possible: $TargetPath is not layersnapped."
    exit 1
  fi
}

# choose layersnap mode fitting the host-system
set_mode() {
  # try to check by ubuntu-version first, then by kernel-version
  if [ "$(cat /etc/issue | grep -c Ubuntu)" -gt "0" ]; then
    ubuntuMainVersion=$(cat /etc/lsb-release | grep DISTRIB_RELEASE | cut -c 17- | cut -d "." -f1)
    ubuntuSubVersion=$(cat /etc/lsb-release | grep DISTRIB_RELEASE | cut -c 17- | cut -d "." -f2)
  else
    kernelMainVersion=$(uname -r | cut -d "." -f1)
    kernelSubVersion=$(uname -r | cut -d "." -f2)
  fi
  
  # set layersnap-mode
  if [ "$ubuntuMainVersion" -ge "14" ] && [ "$ubuntuSubVersion" -ge "04" ]; then
    LSMode="unlimited"
  elif   [ "$ubuntuMainVersion" -ge "12" ] && [ "$ubuntuSubVersion" -ge "04" ]; then
    LSMode="legacy"
  elif [ "$kernelMainVersion" == "4" ]; then
    LSMode="unlimited"
  elif [ "$kernelMainVersion" == "3" ]   && [ "$kernelSubVersion" -ge "18" ]; then
    LSMode="legacy"
  else
    echo "ABORTING: Sorry, but your System is not capable of running layersnap."
    echo "Layersnap depends on overlayfs, which was included in kernel 3.18 and extended by support of multiple lower-layers in 4.0. Besides that, Ubuntu supports overlayfs partly since at least 12.04 and fully since at least 14.04"
    exit 1
  fi
}

# get human readable total size of directory
size_of_dir() { # (pathname)
  location=$(dirname $(realpath $1)) # get dirname
  name=$(basename $(realpath $1)) # get basename
  sizeCachePath="$location/.size_of_$name" # generate cache path out of dirname and basename
  
  # check if dir-size has already been cached
  if [ -e "$sizeCachePath" ]; then
    echo "$(cat "$sizeCachePath")" # read size from cache
  else
    dirSize=$(du -sch $1 | head -n 1 | cut -d "	" -f1 ) # calculate size
    echo "$dirSize" > $sizeCachePath # write cache
    echo "$dirSize" # echo size
  fi 
}

# output number and pluralized version of word if needed
pluralize() { # (word, count)
 echo "$2 $1$(if [ "$2" != "1" ]; then echo "s"; fi)"
}

# compose status line of layer
layer_status_line() { # (count, path)
  if [ "$3" != "upper" ]; then
    # lower layers
    LayerDate=$(date -d @$(basename $2 | cut -c 7-) "$DisplayDateFormat")
  else
    # upper layer
    LayerDate=$(printf "%${#LayerDate}s" "now")
  fi
  LayerFileCount=$(find $2 -type f | wc -l)
  echo "layer $(printf "%${#LayerCount}d" $1) from $LayerDate with $(size_of_dir "$2") in $(pluralize "file" $LayerFileCount)"
}

# check if pool is mounted
is_pool_mounted() {
  if mount | grep $TargetPath > /dev/null; then
    return 0 # true
  fi

  if [ -d "$Lower2Path" ] && ! mount | grep $Lower2Path > /dev/null; then
    return 1 # false
  fi
  
  return 1 # false
}

# set all the variables needed for working with a layer-pool
set_pool_vars() {
  LayerName=$(date "$DateFormat")
  UpperPath="$PoolPath/upper"
  WorkPath="$PoolPath/work"
  NewLowerPath="$PoolPath/lower-$LayerName"

  # set mode specific paths
  if [ "$LSMode" == "unlimited" ]; then
  
    # ":"-seperated descending list of layer-paths
    LowerList=""
    for f in "$PoolPath/lower-"*
    do
      LowerList="$(realpath "$f"):$LowerList"
    done  
    # remove trailing colon
    LowerList=${LowerList::-1}
  elif [ "$LSMode" == "legacy" ]; then
    # ":"-seperated ascending list of layer-paths
    lowerList=""
    for f in "$PoolPath/lower-"*
    do
      lowerList="$lowerList$(realpath "$f"):"
    done
    Lower1Path=$(echo "$lowerList" | cut -d ":" -f1)
    Lower2Path=$(echo "$lowerList" | cut -d ":" -f2)
    Upper2Path="$PoolPath/upper2"
  fi
  
  #
  set_layer_count
}

set_layer_count() {
  if [ "$LSMode" == "unlimited" ]; then 
    # total lower-layer-count
    LayerCount=$(find "$PoolPath" -name lower-* | wc -l)
    LayerCount=$(expr "$LayerCount" + 1)
  elif [ "$LSMode" == "legacy" ]; then
    if [ -d "$Upper2Path" ]; then
      LayerCount="3"
    elif [ -d "$UpperPath" ]; then
      LayerCount="2"
    else
      LayerCount="1"      
    fi
  fi
  
  if [ "$LSMode" == "unlimited" ]; then
    LayersAvailable="Unlimited"
  elif [ "$LSMode" == "legacy" ]; then
    LayersAvailable=$(expr 3 - "$LayerCount")
  fi
}

# if pool-dir doesnt exist, you're doing the first snapshot 
is_first_snapshot() {
  # cache result, so it doesnt change while snapshot progresses
  if [ -z $isFirstSnapshot ]; then # check if variable has string-length of zero
    if [ ! -d "$PoolPath" ]; then
      isFirstSnapshot=true
    else
      isFirstSnapshot=false
    fi
  fi

  # decide via cache
  if [ "$isFirstSnapshot" == "true" ]; then
    return 0 # true
  elif [ "$isFirstSnapshot" == "false" ]; then
    return 1 # false
  fi

  echo ERRRORRRR
}

# is second and last legacy-mode snapshot; in unlimited mode, there ist never a last snapshot
is_last_snapshot() {
  if [ -d "$PoolPath" ]  && [ ! -d "$Upper2Path" ]; then
    return 0 # true, last
  else
    return 1 # fasle, other
  fi
}

# used by --merge
set_destination_layer_path() {
  i=1
  for f in "$PoolPath/lower-"*
  do
    if [ "$i" == "$destinationLayerID" ]; then
      destinationLayerPath="$f"
      break
    fi
    i=$(expr $i + 1)
  done
}

# sets LowerList-variable 
set_lower_list() { # (from-ID, to-ID)
  # check if params are set and are integers
  if [[ "$1" =~ "^[0-9]+$" ]] && [[ "$1" =~ "^[0-9]+$" ]]; then
    # if params are set, use them
    from="$1"
    to="$2"
  else
    # unless params are set, select all layers
    from="1"
    to="999999999"
  fi
  
  # reset LowerList
  LowerList=""
  
  # reset iterator
  i=1
  
  # iterate through lower paths
  for f in "$PoolPath/lower-"*
  do
    # check if layer is within selected range
    if [ "$i" -ge "$from" ] && [ "$i" -le "$to" ]; then
      # add layers absolute path to the LowerList in the correct order for overlayfs-syntax
      LowerList="$(realpath "$f"):$LowerList"
    fi
    # raise iterator anyway
    i=$(expr $i + 1)
  done
  
  # remove trailing colon
  LowerList=${LowerList::-1}
}

# merges one directory into another, overwriting existing files 
merge_layers_by_path() { # (fromLayerPath, destinationLayerPath)
  echo "merging $1 into $2"
  debug rsync --remove-source-files "$1/"* "$2"
  # find "$1/"* -type d -empty -delete
  
  # displays message if layer has not been emptied and deleted completely
  rmdir "$1"
}

# parse request params
parse_request() { # ($*)
  ACTION="status"
  while [[ $# -gt 1 ]]
  do
    key="$1"
    case $key in
      s|snapshot)
        ACTION="snapshot"
        shift
      ;;

      c|checkout)
        ACTION="checkout"
        shift
      ;;

      r|restore)
        ACTION="restore"
        shift
      ;;

      m|merge)
        ACTION="merge"
        shift
      ;;
      
      status)
        ACTION="status"
        shift
      ;;
    esac
  done

  # last param
  if [ -n "$1" ]; then
    TargetPath=$(realpath $1)
    #TargetPath="$(pwd)/$1"
  else
    echo "ERROR: please provide a target-dir!"
  fi
}

# print 
debug() {
  echo $* # uncomment to enable debugging
  $*
}


###############
###############
##           ##
## BOOTSTRAP ##
##           ##
###############
###############

# call bootstrapper and pass request params
ls_bootstrap $*










