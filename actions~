#!/bin/bash

# ResentSnapshot=$(ls -1 "$PoolPath/lower-"* | sort -r | head --lines=1)

ls_status() {
  setPoolVars

  echo "LAYERSNAP: $TargetPath" consists of $(expr $LayerCount + 1) layers.
  i=0
  for f in "$PoolPath/lower-"*; do
    i=$(expr $i + 1)
    layerStatusLine $i $f
  done
  layerStatusLine $(expr $LayerCount + 1) $UpperPath upper
}

#
# mount pool
#

ls_mount() {
  setPoolVars
  
  # mount
  mount -t overlay overlay -olowerdir="$LowerList",upperdir="$UpperPath",workdir="$WorkPath" "$TargetPath"
}

#
# create new snapshot-layer
#
# - unmount layers, except for first snapshot 
# - make lower-layer from target- or form upper-directory (on first snapshot)
# - create new empty upper directory
# - remount layers
#

ls_snapshot() {
  setPoolVars
  
  if [ ! -d "$PoolPath" ]; then
    ls_snapshot_first
  else
    ls_snapshot_consecutive
  fi
  
  mkdir "$UpperPath"
  ls_mount
}

ls_snapshot_first() {
  mkdir -p "$PoolPath"
  mkdir "$WorkPath"
  mv    "$TargetPath" "$LowerPath"
  mkdir "$TargetPath"
}

ls_snapshot_consecutive() {
  umount "$TargetPath"
  mv "$UpperPath" "$LowerPath"
}

#
# restore layer
#
# - let user select layer-Id to restore
# - merge layer-after-layer into lowest layer
# - make lowest layer the new target dir
# - clean up
#

ls_restore() {
  ls_status
  read -p "Snapshot ID to restore: " LayerID

  umount "$TargetPath"
  rmdir  "$TargetPath"
    
  i=1
  for f in "$PoolPath/lower-"*; do
    # remember lowest layer and merge all upper layer into it
    if [ "$i" == 1 ]; then
      LowestPath="$f"
    else
      rsync --remove-source-files "$f/"* "$LowestPath"
    fi
    if [ "$i" == "$LayerID" ]; then
      break
    fi
    i=$(expr $i + 1)
  done
  
  mv "$LowestPath" "$TargetPath"
  rm -R "$PoolPath"
}

#
# merge with previous layer
#

ls_checkout() {
  ls_status
  read -p "Layer to mount: " LayerID

  # collect selected layers
  i=0
  LowerList=""
  for f in "$PoolPath/lower-"*; do
    i=$(expr $i + 1)
    LowerList=$(realpath $f):$LowerList
    if [ "$i" == "$LayerID" ]; then
      LayerName=$(basename $f | cut -c 7-)
      break
    fi
  done
  
  CheckoutPath=$TargetPath-$LayerName
  mkdir $CheckoutPath
  
  # mount
  mount -t overlay overlay -olowerdir="$LowerList",upperdir="$UpperPath",workdir="$WorkPath" "$CheckoutPath"
}

























